{
  
    
        "post0": {
            "title": "Insert HTML in a NoteBook",
            "content": "The fastpages blog engine is very useful to write a notebook. But I wanted to be able to write HTML directly in my notebook to implement a template. . For the moment, I&#39;m not going to do like that, I&#39;ll keep my template in a classic notebook, but I&#39;ll leave you here the technique to write HTML from a notebook which will be interpreted by fastpages in HTML. . This is HTML written in the notebook in a plain text cell (not Markdown), with h3 tags . If I try to write html with print in a code cell, it fails. . age = 45 name = &quot;Paul&quot; gap = 10 print(f&quot;&lt;h3&gt;In {gap} year(s), {name} will be {age + gap} year(s) old.&lt;/h3&gt;&quot;) . With this formula, a new plain text cell is created, so that&#39;s good! . get_ipython().run_cell_magic(u&#39;HTML&#39;, u&#39;&#39;,f&quot;&lt;h3&gt;In {gap} year(s), {name} will be {age + gap} year(s) old.&lt;/h3&gt;&quot;) . In 10 year(s), Paul will be 55 year(s) old. .",
            "url": "https://cecilegallioz.github.io/blog/html/fastpages/2021/04/19/TestHTML.html",
            "relUrl": "/html/fastpages/2021/04/19/TestHTML.html",
            "date": " • Apr 19, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Reminder on Panda (from Kaggle)",
            "content": "import pandas as pd pd.set_option(&quot;display.max_rows&quot;, 6) . DataFrame . pd.DataFrame({Column1: [Value1.1, Value2.1], Column2: [Value1.2, Value2.2]}, index=[&quot;Row1&quot;, &quot;Row2&quot;]) . DataFrame = table as Excel . pd.DataFrame({&quot;Column_1&quot;: [&quot;Value_1.1&quot;, &quot;Value_2.1&quot;], &quot;Column_2&quot;: [&quot;Value_1.2&quot;, &quot;Value_2.2&quot;]}, index=[&quot;Row_1&quot;, &quot;Row_2&quot;]) . Column_1 Column_2 . Row_1 Value_1.1 | Value_1.2 | . Row_2 Value_2.1 | Value_2.2 | . pd.DataFrame({&quot;Apples&quot;: [35, 41], &quot;Bananas&quot;: [21, 34]}, index=[&quot;2017 Sales&quot;, &quot;2018 Sales&quot;]) . Apples Bananas . 2017 Sales 35 | 21 | . 2018 Sales 41 | 34 | . Series . pd.Series([Value1, Value2, Value3], index=[&quot;Row1&quot;, &quot;Row2&quot;, &quot;Row3&quot;], name=&quot;nameSerie&quot;) . Series = list . pd.Series([&quot;Value_1&quot;, &quot;Value_2&quot;, &quot;Value_3&quot;], index=[&quot;Row1&quot;, &quot;Row2&quot;, &quot;Row3&quot;], name=&quot;nameSerie&quot;) . Row1 Value_1 Row2 Value_2 Row3 Value_3 Name: nameSerie, dtype: object . pd.Series([&quot;4 cups&quot;, &quot;1 cup&quot;, &quot;2 large&quot;, &quot;1 can&quot;], index=[&quot;Flour&quot;, &quot;Milk&quot;, &quot;Eggs&quot;, &quot;Spam&quot;], name=&quot;Dinner&quot;) . Flour 4 cups Milk 1 cup Eggs 2 large Spam 1 can Name: Dinner, dtype: object . Reading . pd.read_csv(&quot;path&quot;, index_col=0) . Put the option &quot;index_col=0&quot; if you want to use the index inside the csv (in first column) . wines = pd.read_csv(&quot;./src/winemag-data-130k-v2.csv&quot;, index_col=0) . wines.shape . (129971, 13) . wines.head() . country description designation points price province region_1 region_2 taster_name taster_twitter_handle title variety winery . 0 Italy | Aromas include tropical fruit, broom, brimston... | Vulkà Bianco | 87 | NaN | Sicily &amp; Sardinia | Etna | NaN | Kerin O’Keefe | @kerinokeefe | Nicosia 2013 Vulkà Bianco (Etna) | White Blend | Nicosia | . 1 Portugal | This is ripe and fruity, a wine that is smooth... | Avidagos | 87 | 15.0 | Douro | NaN | NaN | Roger Voss | @vossroger | Quinta dos Avidagos 2011 Avidagos Red (Douro) | Portuguese Red | Quinta dos Avidagos | . 2 US | Tart and snappy, the flavors of lime flesh and... | NaN | 87 | 14.0 | Oregon | Willamette Valley | Willamette Valley | Paul Gregutt | @paulgwine | Rainstorm 2013 Pinot Gris (Willamette Valley) | Pinot Gris | Rainstorm | . 3 US | Pineapple rind, lemon pith and orange blossom ... | Reserve Late Harvest | 87 | 13.0 | Michigan | Lake Michigan Shore | NaN | Alexander Peartree | NaN | St. Julian 2013 Reserve Late Harvest Riesling ... | Riesling | St. Julian | . 4 US | Much like the regular bottling from 2012, this... | Vintner&#39;s Reserve Wild Child Block | 87 | 65.0 | Oregon | Willamette Valley | Willamette Valley | Paul Gregutt | @paulgwine | Sweet Cheeks 2012 Vintner&#39;s Reserve Wild Child... | Pinot Noir | Sweet Cheeks | . . Index with iloc (numerical position) . data.iloc[row, column] . &quot;:&quot; minds everithing . iloc uses the Python stdlib indexing scheme, where the first element of the range is included and the last one excluded. . Warning: with iloc : [0:10] =&gt; 0,...,9 . wines.iloc[0] . country Italy description Aromas include tropical fruit, broom, brimston... designation Vulkà Bianco ... title Nicosia 2013 Vulkà Bianco (Etna) variety White Blend winery Nicosia Name: 0, Length: 13, dtype: object . wines.iloc[:, 0] . 0 Italy 1 Portugal 2 US ... 129968 France 129969 France 129970 France Name: country, Length: 129971, dtype: object . wines.iloc[:3, 0] . 0 Italy 1 Portugal 2 US Name: country, dtype: object . wines.iloc[1:3, 0] . 1 Portugal 2 US Name: country, dtype: object . wines.iloc[[0, 1, 2], 0] . 0 Italy 1 Portugal 2 US Name: country, dtype: object . wines.iloc[-5:] . country description designation points price province region_1 region_2 taster_name taster_twitter_handle title variety winery . 129966 Germany | Notes of honeysuckle and cantaloupe sweeten th... | Brauneberger Juffer-Sonnenuhr Spätlese | 90 | 28.0 | Mosel | NaN | NaN | Anna Lee C. Iijima | NaN | Dr. H. Thanisch (Erben Müller-Burggraef) 2013 ... | Riesling | Dr. H. Thanisch (Erben Müller-Burggraef) | . 129967 US | Citation is given as much as a decade of bottl... | NaN | 90 | 75.0 | Oregon | Oregon | Oregon Other | Paul Gregutt | @paulgwine | Citation 2004 Pinot Noir (Oregon) | Pinot Noir | Citation | . 129968 France | Well-drained gravel soil gives this wine its c... | Kritt | 90 | 30.0 | Alsace | Alsace | NaN | Roger Voss | @vossroger | Domaine Gresser 2013 Kritt Gewurztraminer (Als... | Gewürztraminer | Domaine Gresser | . 129969 France | A dry style of Pinot Gris, this is crisp with ... | NaN | 90 | 32.0 | Alsace | Alsace | NaN | Roger Voss | @vossroger | Domaine Marcel Deiss 2012 Pinot Gris (Alsace) | Pinot Gris | Domaine Marcel Deiss | . 129970 France | Big, rich and off-dry, this is powered by inte... | Lieu-dit Harth Cuvée Caroline | 90 | 21.0 | Alsace | Alsace | NaN | Roger Voss | @vossroger | Domaine Schoffit 2012 Lieu-dit Harth Cuvée Car... | Gewürztraminer | Domaine Schoffit | . Index with loc (label_based position) . data.loc[row, column] . loc indexes inclusively. So 0:10 will select entries 0,...,10. . Warning: with loc : [0:10] =&gt; 0,...,10 . wines.loc[:, &quot;points&quot;] . 0 87 1 87 2 87 .. 129968 90 129969 90 129970 90 Name: points, Length: 129971, dtype: int64 . wines.loc[0:9,[&quot;country&quot;, &quot;variety&quot;]] . country variety . 0 Italy | White Blend | . 1 Portugal | Portuguese Red | . 2 US | Pinot Gris | . ... ... | ... | . 7 France | Gewürztraminer | . 8 Germany | Gewürztraminer | . 9 France | Pinot Gris | . 10 rows × 2 columns . wines.loc[(wines.country == &#39;Italy&#39;) &amp; (wines.points &gt;= 90)] . country description designation points price province region_1 region_2 taster_name taster_twitter_handle title variety winery . 120 Italy | Slightly backward, particularly given the vint... | Bricco Rocche Prapó | 92 | 70.0 | Piedmont | Barolo | NaN | NaN | NaN | Ceretto 2003 Bricco Rocche Prapó (Barolo) | Nebbiolo | Ceretto | . 130 Italy | At the first it was quite muted and subdued, b... | Bricco Rocche Brunate | 91 | 70.0 | Piedmont | Barolo | NaN | NaN | NaN | Ceretto 2003 Bricco Rocche Brunate (Barolo) | Nebbiolo | Ceretto | . 133 Italy | Einaudi&#39;s wines have been improving lately, an... | NaN | 91 | 68.0 | Piedmont | Barolo | NaN | NaN | NaN | Poderi Luigi Einaudi 2003 Barolo | Nebbiolo | Poderi Luigi Einaudi | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 129947 Italy | A blend of 65% Cabernet Sauvignon, 30% Merlot ... | Symposio | 90 | 20.0 | Sicily &amp; Sardinia | Terre Siciliane | NaN | Kerin O’Keefe | @kerinokeefe | Feudo Principi di Butera 2012 Symposio Red (Te... | Red Blend | Feudo Principi di Butera | . 129961 Italy | Intense aromas of wild cherry, baking spice, t... | NaN | 90 | 30.0 | Sicily &amp; Sardinia | Sicilia | NaN | Kerin O’Keefe | @kerinokeefe | COS 2013 Frappato (Sicilia) | Frappato | COS | . 129962 Italy | Blackberry, cassis, grilled herb and toasted a... | Sàgana Tenuta San Giacomo | 90 | 40.0 | Sicily &amp; Sardinia | Sicilia | NaN | Kerin O’Keefe | @kerinokeefe | Cusumano 2012 Sàgana Tenuta San Giacomo Nero d... | Nero d&#39;Avola | Cusumano | . 6648 rows × 13 columns . wines.loc[(wines.country == &#39;Italy&#39;) | (wines.points &gt;= 90)] . country description designation points price province region_1 region_2 taster_name taster_twitter_handle title variety winery . 0 Italy | Aromas include tropical fruit, broom, brimston... | Vulkà Bianco | 87 | NaN | Sicily &amp; Sardinia | Etna | NaN | Kerin O’Keefe | @kerinokeefe | Nicosia 2013 Vulkà Bianco (Etna) | White Blend | Nicosia | . 6 Italy | Here&#39;s a bright, informal red that opens with ... | Belsito | 87 | 16.0 | Sicily &amp; Sardinia | Vittoria | NaN | Kerin O’Keefe | @kerinokeefe | Terre di Giurfo 2013 Belsito Frappato (Vittoria) | Frappato | Terre di Giurfo | . 13 Italy | This is dominated by oak and oak-driven aromas... | Rosso | 87 | NaN | Sicily &amp; Sardinia | Etna | NaN | Kerin O’Keefe | @kerinokeefe | Masseria Setteporte 2012 Rosso (Etna) | Nerello Mascalese | Masseria Setteporte | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 129968 France | Well-drained gravel soil gives this wine its c... | Kritt | 90 | 30.0 | Alsace | Alsace | NaN | Roger Voss | @vossroger | Domaine Gresser 2013 Kritt Gewurztraminer (Als... | Gewürztraminer | Domaine Gresser | . 129969 France | A dry style of Pinot Gris, this is crisp with ... | NaN | 90 | 32.0 | Alsace | Alsace | NaN | Roger Voss | @vossroger | Domaine Marcel Deiss 2012 Pinot Gris (Alsace) | Pinot Gris | Domaine Marcel Deiss | . 129970 France | Big, rich and off-dry, this is powered by inte... | Lieu-dit Harth Cuvée Caroline | 90 | 21.0 | Alsace | Alsace | NaN | Roger Voss | @vossroger | Domaine Schoffit 2012 Lieu-dit Harth Cuvée Car... | Gewürztraminer | Domaine Schoffit | . 61937 rows × 13 columns . wines.loc[wines.country.isin([&#39;Italy&#39;, &#39;France&#39;])] . country description designation points price province region_1 region_2 taster_name taster_twitter_handle title variety winery . 0 Italy | Aromas include tropical fruit, broom, brimston... | Vulkà Bianco | 87 | NaN | Sicily &amp; Sardinia | Etna | NaN | Kerin O’Keefe | @kerinokeefe | Nicosia 2013 Vulkà Bianco (Etna) | White Blend | Nicosia | . 6 Italy | Here&#39;s a bright, informal red that opens with ... | Belsito | 87 | 16.0 | Sicily &amp; Sardinia | Vittoria | NaN | Kerin O’Keefe | @kerinokeefe | Terre di Giurfo 2013 Belsito Frappato (Vittoria) | Frappato | Terre di Giurfo | . 7 France | This dry and restrained wine offers spice in p... | NaN | 87 | 24.0 | Alsace | Alsace | NaN | Roger Voss | @vossroger | Trimbach 2012 Gewurztraminer (Alsace) | Gewürztraminer | Trimbach | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 129968 France | Well-drained gravel soil gives this wine its c... | Kritt | 90 | 30.0 | Alsace | Alsace | NaN | Roger Voss | @vossroger | Domaine Gresser 2013 Kritt Gewurztraminer (Als... | Gewürztraminer | Domaine Gresser | . 129969 France | A dry style of Pinot Gris, this is crisp with ... | NaN | 90 | 32.0 | Alsace | Alsace | NaN | Roger Voss | @vossroger | Domaine Marcel Deiss 2012 Pinot Gris (Alsace) | Pinot Gris | Domaine Marcel Deiss | . 129970 France | Big, rich and off-dry, this is powered by inte... | Lieu-dit Harth Cuvée Caroline | 90 | 21.0 | Alsace | Alsace | NaN | Roger Voss | @vossroger | Domaine Schoffit 2012 Lieu-dit Harth Cuvée Car... | Gewürztraminer | Domaine Schoffit | . 41633 rows × 13 columns . wines.loc[wines.price.notnull()] . country description designation points price province region_1 region_2 taster_name taster_twitter_handle title variety winery . 1 Portugal | This is ripe and fruity, a wine that is smooth... | Avidagos | 87 | 15.0 | Douro | NaN | NaN | Roger Voss | @vossroger | Quinta dos Avidagos 2011 Avidagos Red (Douro) | Portuguese Red | Quinta dos Avidagos | . 2 US | Tart and snappy, the flavors of lime flesh and... | NaN | 87 | 14.0 | Oregon | Willamette Valley | Willamette Valley | Paul Gregutt | @paulgwine | Rainstorm 2013 Pinot Gris (Willamette Valley) | Pinot Gris | Rainstorm | . 3 US | Pineapple rind, lemon pith and orange blossom ... | Reserve Late Harvest | 87 | 13.0 | Michigan | Lake Michigan Shore | NaN | Alexander Peartree | NaN | St. Julian 2013 Reserve Late Harvest Riesling ... | Riesling | St. Julian | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 129968 France | Well-drained gravel soil gives this wine its c... | Kritt | 90 | 30.0 | Alsace | Alsace | NaN | Roger Voss | @vossroger | Domaine Gresser 2013 Kritt Gewurztraminer (Als... | Gewürztraminer | Domaine Gresser | . 129969 France | A dry style of Pinot Gris, this is crisp with ... | NaN | 90 | 32.0 | Alsace | Alsace | NaN | Roger Voss | @vossroger | Domaine Marcel Deiss 2012 Pinot Gris (Alsace) | Pinot Gris | Domaine Marcel Deiss | . 129970 France | Big, rich and off-dry, this is powered by inte... | Lieu-dit Harth Cuvée Caroline | 90 | 21.0 | Alsace | Alsace | NaN | Roger Voss | @vossroger | Domaine Schoffit 2012 Lieu-dit Harth Cuvée Car... | Gewürztraminer | Domaine Schoffit | . 120975 rows × 13 columns . wines.loc[wines.price.isnull()] . country description designation points price province region_1 region_2 taster_name taster_twitter_handle title variety winery . 0 Italy | Aromas include tropical fruit, broom, brimston... | Vulkà Bianco | 87 | NaN | Sicily &amp; Sardinia | Etna | NaN | Kerin O’Keefe | @kerinokeefe | Nicosia 2013 Vulkà Bianco (Etna) | White Blend | Nicosia | . 13 Italy | This is dominated by oak and oak-driven aromas... | Rosso | 87 | NaN | Sicily &amp; Sardinia | Etna | NaN | Kerin O’Keefe | @kerinokeefe | Masseria Setteporte 2012 Rosso (Etna) | Nerello Mascalese | Masseria Setteporte | . 30 France | Red cherry fruit comes laced with light tannin... | Nouveau | 86 | NaN | Beaujolais | Beaujolais-Villages | NaN | Roger Voss | @vossroger | Domaine de la Madone 2012 Nouveau (Beaujolais... | Gamay | Domaine de la Madone | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 129863 Portugal | This mature wine that has 50% Touriga Nacional... | Reserva | 90 | NaN | Dão | NaN | NaN | Roger Voss | @vossroger | Seacampo 2011 Reserva Red (Dão) | Portuguese Red | Seacampo | . 129893 Italy | Aromas of passion fruit, hay and a vegetal not... | Corte Menini | 91 | NaN | Veneto | Soave Classico | NaN | Kerin O’Keefe | @kerinokeefe | Le Mandolare 2015 Corte Menini (Soave Classico) | Garganega | Le Mandolare | . 129964 France | Initially quite muted, this wine slowly develo... | Domaine Saint-Rémy Herrenweg | 90 | NaN | Alsace | Alsace | NaN | Roger Voss | @vossroger | Domaine Ehrhart 2013 Domaine Saint-Rémy Herren... | Gewürztraminer | Domaine Ehrhart | . 8996 rows × 13 columns . Summary functions . wines.points.describe() . count 129971.000000 mean 88.447138 std 3.039730 ... 50% 88.000000 75% 91.000000 max 100.000000 Name: points, Length: 8, dtype: float64 . wines.taster_name.describe() . count 103727 unique 19 top Roger Voss freq 25514 Name: taster_name, dtype: object . wines.points.mean() . 88.44713820775404 . wines.points.median() . 88.0 . wines.taster_name.unique() . array([&#39;Kerin O’Keefe&#39;, &#39;Roger Voss&#39;, &#39;Paul Gregutt&#39;, &#39;Alexander Peartree&#39;, &#39;Michael Schachner&#39;, &#39;Anna Lee C. Iijima&#39;, &#39;Virginie Boone&#39;, &#39;Matt Kettmann&#39;, nan, &#39;Sean P. Sullivan&#39;, &#39;Jim Gordon&#39;, &#39;Joe Czerwinski&#39;, &#39;Anne Krebiehl xa0MW&#39;, &#39;Lauren Buzzeo&#39;, &#39;Mike DeSimone&#39;, &#39;Jeff Jenssen&#39;, &#39;Susan Kostrzewa&#39;, &#39;Carrie Dykes&#39;, &#39;Fiona Adams&#39;, &#39;Christina Pickard&#39;], dtype=object) . wines.taster_name.value_counts() . Roger Voss 25514 Michael Schachner 15134 Kerin O’Keefe 10776 ... Carrie Dykes 139 Fiona Adams 27 Christina Pickard 6 Name: taster_name, Length: 19, dtype: int64 . Maps . mySeries.map(lambda p: function(p)) . =&gt; new Series . myDataFrame.apply(nameFunctionOnRow, axis=&quot;columns&quot;) . or . myDataFrame.apply(nameFunctionOnColumns, axis=&quot;index&quot;) (by default) . Note that map() and apply() return new, transformed Series and DataFrames, respectively. They don&#39;t modify the original data they&#39;re called on. . review_points_mean = wines.points.mean() wines.points.map(lambda p: p - review_points_mean) . 0 -1.447138 1 -1.447138 2 -1.447138 ... 129968 1.552862 129969 1.552862 129970 1.552862 Name: points, Length: 129971, dtype: float64 . review_points_mean = wines.points.mean() wines.points - review_points_mean . 0 -1.447138 1 -1.447138 2 -1.447138 ... 129968 1.552862 129969 1.552862 129970 1.552862 Name: points, Length: 129971, dtype: float64 . def remean_points(row): row.points = row.points - review_points_mean return row wines.apply(remean_points, axis=&#39;columns&#39;) . country description designation points price province region_1 region_2 taster_name taster_twitter_handle title variety winery . 0 Italy | Aromas include tropical fruit, broom, brimston... | Vulkà Bianco | -1.447138 | NaN | Sicily &amp; Sardinia | Etna | NaN | Kerin O’Keefe | @kerinokeefe | Nicosia 2013 Vulkà Bianco (Etna) | White Blend | Nicosia | . 1 Portugal | This is ripe and fruity, a wine that is smooth... | Avidagos | -1.447138 | 15.0 | Douro | NaN | NaN | Roger Voss | @vossroger | Quinta dos Avidagos 2011 Avidagos Red (Douro) | Portuguese Red | Quinta dos Avidagos | . 2 US | Tart and snappy, the flavors of lime flesh and... | NaN | -1.447138 | 14.0 | Oregon | Willamette Valley | Willamette Valley | Paul Gregutt | @paulgwine | Rainstorm 2013 Pinot Gris (Willamette Valley) | Pinot Gris | Rainstorm | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 129968 France | Well-drained gravel soil gives this wine its c... | Kritt | 1.552862 | 30.0 | Alsace | Alsace | NaN | Roger Voss | @vossroger | Domaine Gresser 2013 Kritt Gewurztraminer (Als... | Gewürztraminer | Domaine Gresser | . 129969 France | A dry style of Pinot Gris, this is crisp with ... | NaN | 1.552862 | 32.0 | Alsace | Alsace | NaN | Roger Voss | @vossroger | Domaine Marcel Deiss 2012 Pinot Gris (Alsace) | Pinot Gris | Domaine Marcel Deiss | . 129970 France | Big, rich and off-dry, this is powered by inte... | Lieu-dit Harth Cuvée Caroline | 1.552862 | 21.0 | Alsace | Alsace | NaN | Roger Voss | @vossroger | Domaine Schoffit 2012 Lieu-dit Harth Cuvée Car... | Gewürztraminer | Domaine Schoffit | . 129971 rows × 13 columns . # index of the bet bargain bidx = (wines.points / wines.price).idxmax() bargain_wine = wines.title.iloc[bidx] bargain_wine . &#39;Bandit NV Merlot (California)&#39; . def nb_stars(row): if row.country == &quot;Canada&quot;: return 3 elif row.points &gt;= 95: return 3 elif row.points &gt;= 85: return 2 else: return 1 star_ratings = wines.apply(nb_stars, axis=&quot;columns&quot;) print(star_ratings) . 0 2 1 2 2 2 .. 129968 2 129969 2 129970 2 Length: 129971, dtype: int64 . nb_tropical = sum(wines.description.map(lambda p: &quot;tropical&quot; in p)) nb_fruity = sum(wines.description.map(lambda p: &quot;fruity&quot; in p)) descriptor_counts = pd.Series([nb_tropical, nb_fruity], index=[&#39;tropical&#39;, &#39;fruity&#39;]) print(descriptor_counts) . tropical 3607 fruity 9090 dtype: int64 . GroupBy . wines.points.value_counts() . 88 17207 87 16933 90 15410 ... 98 77 99 33 100 19 Name: points, Length: 21, dtype: int64 . wines.groupby(&#39;points&#39;).points.count() . points 80 397 81 692 82 1836 ... 98 77 99 33 100 19 Name: points, Length: 21, dtype: int64 . wines.groupby(&#39;points&#39;).price.min() . points 80 5.0 81 5.0 82 4.0 ... 98 50.0 99 44.0 100 80.0 Name: price, Length: 21, dtype: float64 . wines.groupby(&#39;points&#39;).price.mean().round(1) . points 80 16.4 81 17.2 82 18.9 ... 98 245.5 99 284.2 100 485.9 Name: price, Length: 21, dtype: float64 . wines.groupby(&#39;winery&#39;).apply(lambda df: df.title.iloc[0]) . winery 1+1=3 1+1=3 NV Rosé Sparkling (Cava) 10 Knots 10 Knots 2010 Viognier (Paso Robles) 100 Percent Wine 100 Percent Wine 2015 Moscato (California) ... Ökonomierat Rebholz Ökonomierat Rebholz 2007 Von Rotliegenden Spät... àMaurice àMaurice 2013 Fred Estate Syrah (Walla Walla V... Štoka Štoka 2009 Izbrani Teran (Kras) Length: 16757, dtype: object . wines.groupby([&#39;country&#39;, &#39;province&#39;]).apply(lambda df: df.loc[df.points.idxmax()]) . country description designation points price province region_1 region_2 taster_name taster_twitter_handle title variety winery . country province . Argentina Mendoza Province Argentina | If the color doesn&#39;t tell the full story, the ... | Nicasia Vineyard | 97 | 120.0 | Mendoza Province | Mendoza | NaN | Michael Schachner | @wineschach | Bodega Catena Zapata 2006 Nicasia Vineyard Mal... | Malbec | Bodega Catena Zapata | . Other Argentina | Take note, this could be the best wine Colomé ... | Reserva | 95 | 90.0 | Other | Salta | NaN | Michael Schachner | @wineschach | Colomé 2010 Reserva Malbec (Salta) | Malbec | Colomé | . Armenia Armenia Armenia | Deep salmon in color, this wine offers a bouqu... | Estate Bottled | 88 | 15.0 | Armenia | NaN | NaN | Mike DeSimone | @worldwineguys | Van Ardi 2015 Estate Bottled Rosé (Armenia) | Rosé | Van Ardi | . ... ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . Uruguay Progreso Uruguay | Rusty in color but deep and complex in nature,... | Etxe Oneko Fortified Sweet Red | 90 | 46.0 | Progreso | NaN | NaN | Michael Schachner | @wineschach | Pisano 2007 Etxe Oneko Fortified Sweet Red Tan... | Tannat | Pisano | . San Jose Uruguay | Baked, sweet, heavy aromas turn earthy with ti... | El Preciado Gran Reserva | 87 | 50.0 | San Jose | NaN | NaN | Michael Schachner | @wineschach | Castillo Viejo 2005 El Preciado Gran Reserva R... | Red Blend | Castillo Viejo | . Uruguay Uruguay | Cherry and berry aromas are ripe, healthy and ... | Blend 002 Limited Edition | 91 | 22.0 | Uruguay | NaN | NaN | Michael Schachner | @wineschach | Narbona NV Blend 002 Limited Edition Tannat-Ca... | Tannat-Cabernet Franc | Narbona | . 425 rows × 13 columns . wines.groupby([&#39;country&#39;]).price.agg([len, min, max]) . len min max . country . Argentina 3800.0 | 4.0 | 230.0 | . Armenia 2.0 | 14.0 | 15.0 | . Australia 2329.0 | 5.0 | 850.0 | . ... ... | ... | ... | . US 54504.0 | 4.0 | 2013.0 | . Ukraine 14.0 | 6.0 | 13.0 | . Uruguay 109.0 | 10.0 | 130.0 | . 43 rows × 3 columns . countries_reviewed = wines.groupby([&#39;country&#39;, &#39;province&#39;]).description.agg([len]) countries_reviewed . len . country province . Argentina Mendoza Province 3264 | . Other 536 | . Armenia Armenia 2 | . ... ... ... | . Uruguay Progreso 11 | . San Jose 3 | . Uruguay 24 | . 425 rows × 1 columns . mi = countries_reviewed.index type(mi) . pandas.core.indexes.multi.MultiIndex . countries_reviewed.reset_index() . country province len . 0 Argentina | Mendoza Province | 3264 | . 1 Argentina | Other | 536 | . 2 Armenia | Armenia | 2 | . ... ... | ... | ... | . 422 Uruguay | Progreso | 11 | . 423 Uruguay | San Jose | 3 | . 424 Uruguay | Uruguay | 24 | . 425 rows × 3 columns . countries_reviewed = countries_reviewed.reset_index() countries_reviewed.sort_values(by=&#39;len&#39;) . country province len . 179 Greece | Muscat of Kefallonian | 1 | . 192 Greece | Sterea Ellada | 1 | . 194 Greece | Thraki | 1 | . ... ... | ... | ... | . 118 France | Bordeaux | 5941 | . 415 US | Washington | 8639 | . 392 US | California | 36247 | . 425 rows × 3 columns . countries_reviewed.sort_values(by=&#39;len&#39;, ascending=False) . country province len . 392 US | California | 36247 | . 415 US | Washington | 8639 | . 118 France | Bordeaux | 5941 | . ... ... | ... | ... | . 357 South Africa | Piekenierskloof | 1 | . 63 Chile | Coelemu | 1 | . 149 Greece | Beotia | 1 | . 425 rows × 3 columns . countries_reviewed.sort_index() . country province len . 0 Argentina | Mendoza Province | 3264 | . 1 Argentina | Other | 536 | . 2 Armenia | Armenia | 2 | . ... ... | ... | ... | . 422 Uruguay | Progreso | 11 | . 423 Uruguay | San Jose | 3 | . 424 Uruguay | Uruguay | 24 | . 425 rows × 3 columns . countries_reviewed.sort_values(by=[&#39;country&#39;, &#39;len&#39;]) . country province len . 1 Argentina | Other | 536 | . 0 Argentina | Mendoza Province | 3264 | . 2 Armenia | Armenia | 2 | . ... ... | ... | ... | . 420 Uruguay | Juanico | 12 | . 424 Uruguay | Uruguay | 24 | . 419 Uruguay | Canelones | 43 | . 425 rows × 3 columns .",
            "url": "https://cecilegallioz.github.io/blog/python/panda/2021/04/17/ReminderPanda.html",
            "relUrl": "/python/panda/2021/04/17/ReminderPanda.html",
            "date": " • Apr 17, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Reminder on Jupyter NoteBook",
            "content": "Commands . Command Execute . Double click or [ENTER] | Enter a cell | . [CTRL]+[ENTER] | Execute the contents of a text or code cell and exit | . [ESC] | Exit from a cell without executing it | . | | . [b] | Insert a cell below | . [a] | Insert a cell above (Above) | . [d]+[d] | Delete a cell without confirmation | . | | . [y] | Transform cell to code cell Python | . [m] | Transform cell to text Markdown | . | | . [s] | Save | . [CTRL]+[s] | Save | . Formatting . Command Execute . # Title1 | Level 1 Title | . ###### Title6 | Level 6 title | . | | . ** ** | Insert bold | . * * | Insert italic | . ~~ ~~ | Insert barred | . Backslash | Prevents Markdown from interpreting a character | . [ENTER] | Create a paragraph by inserting a new line | . A line . Ordered list 1. . Element1 | Element2 | Non ordered list - . Element1 | Element2 | . Tasks -[ ] . [x] completed task | [ ] unrealized task | .",
            "url": "https://cecilegallioz.github.io/blog/jupyter/2021/04/16/ReminderJupyter.html",
            "relUrl": "/jupyter/2021/04/16/ReminderJupyter.html",
            "date": " • Apr 16, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Reminder on Python",
            "content": "Useful informations . Variables are not typed, while objects are. | . Variables address objects (strong typing). | . Variable names are best in camelCase (first letter in lower case and no numbers in first) and as meaningful as possible. | . In Python to identify a block of instructions, you need an identation of 4 spaces and not a tab | . Small immutable objects are sometimes stored as singletons (only one possible occurrence) | . Basic functions . Function Description Type argument(s) Output . help() | Help on a function | Function name | String | . type() | Type of a variable | All | Type | . len() | Length | All | Int | . print() | Print to screen | All | Exit screen | . input(&quot;Question Text&quot;) | Retrieves value entered by user | String | All | . Types of data . Type Example Immutable? Singleton? Notes . Integer | 1 | Immutable | Possible | No loss of accuracy | . Boolean | True or False | Immutable | Possible | No loss of accuracy | . Float | 1.2 | Immutable | Possible | Possible loss of accuracy | . Complex | 1+2j | Immutable | Possible | Possible loss of accuracy | . String | &quot;blah&quot; or &#39;blah&#39; | Immutable | Possible | | . Tuple | ( ,) or ( , ,) or , | Immutable | Possible | | . | | | | | . List | [ , ] | Mutable | | Stores only the references | . Dictionary | { : , : } | Mutable | | Unordered and unchangeable keys/values | . Set | { , } | Mutable | | Unordered and unique immutable keys | . Operators . Operator Name Notes . = | Opérateur d&#39;affectation | | | | . # | Comments | | | | . | | | | | . + | Addition or concatenation | Int + Int = Int | Int + Float = Float | Text + Text = Text | . - | Subtraction | Int - Int = Int | Int - Float = Float | | . * | Multiplication | Int * Int = Int | Int * Float = Float | | . / | Division | Int / Int = Float | Int / Float = Float | | . | | | | | . % | Modulo | Subtract from division | | | . // | Whole division | Rounded down | | | . ** | Power | idem pow(a,b) | | | . abs() | Absolute value | | | | . | | | | | . str() | Cast in String | str(Int) = String | | | . int() | Cast in Int | int(Float) = Int | | | . float() | Cast in Float | float(Int) = Float | | | . | | | | | . += | Simultaneous addition and affection | | | | . Logic operators . Sign Description . == | equal to | . != | different | . &lt; | strictly less than | . &lt;= | lower than or equal to | . | | . not() | not | . and or &amp; | and | . or or &#39;pipe&#39; | or | . ^ | or exlusive | . | | . element in myGroup | is the element in my group | . Strings (immutable) . Method Description Argument(s) Output . objectString.upper() | All capitalized | - | Text | . objectString.capitalize() | First letter uppercase, subsequent letters lowercase | - | Text | . objectString.strip() | Removes spaces before and after the string | - | Text | . objectString.replace(&quot;old&quot;, &quot;new&quot;) | Replaces all occurrences of old with new | Text, Text | Text | . objectString.find(&quot;look&quot;) | Returns the position of the first occurrence of the searched word or -1 | Text | Int | . | | | | . objectString.strip(&#39;,&#39;).split(&#39;,&#39;) | Split put each word in a list according to a fixed character (&quot;,&quot;) and thanks to strip the last &quot;,&quot; will be deleted | - | List | . &quot;,&quot;.join([&#39;abc&#39;, &#39;def&#39;]) | Makes a string from a list according to a fixed character (e.g. here &quot;,&quot;) | - | Text | . f string . f&quot;blah-blah-blah {function1(variable1)} blah-blah-blah {function2(variable2)} blah-blah-blah&quot; . age = 45 name = &quot;Paul&quot; gap = 10 . f&quot;In {gap} year(s), {name} will be {age + gap} year(s) old.&quot; . &#39;In 10 year(s), Paul will be 55 year(s) old.&#39; . List (mutable) . nameList = [&quot;String&quot;, number, otherList, variable] . The list does not store the objects but only the reference to the object. Its size will not vary according to the size of the referenced objects. . The index starts at 0. . Unlike text, they are modified by their methods =&gt; they are mutable. . Use Method Description . Index | myList[1] | Accesses the 2nd element of the list | . | myList[-1] | Go to the last element of the list | . | myList[1:3] | Accesses the 2nd and 3rd elements of the list | . | myList.index(element) | Returns the index of the element | . | | | . Classic | print(myList) | Displays the entire list | . | len(myList) | Returns the length of a list | . | | | . Sorting | myList.sort() | Changes myList into a sorted list instead | . | sorted(myList) | Copy and sort myList | . | | | . Add | myList.append(element) | Adds the element to the end of the list | . | myList.insert(index, element) | Add the element to the specified index and move the following elements by one index | . | myList.extend([otherList]) | Add the list otherList to the end of the first one (myList) | . | | | . Remove | myList.pop(index) | Delete and display the element with the index as argument or the last one | . | maListe.remove(element) | Deletes the first occurrence of an element | . | del myList[index] | Deletes the element at the specified index | . | | | . String | &quot; &quot;.join(myList) | Transforms a list into a string according to the &quot; &quot;, the opposite of split() | . | | | . Random | random.choice(myList) | choose an element from the list | . | random.choices(myList,3) | choose 3 elements in the list with throw-in | . | random.sample(myList,3) | choose 3 elements from the list without throw-in | . myList = [8, 5, 12, 4, 45, 7] . myList[1] = 5 sum(myList) = 81 max(myList) = 45 . myList = list(range(2)) . myList = [0, 1] . myList.append(2) . myList = [0, 1, 2] . myList.insert(1,&quot;one half&quot;) . myList = [0, &#39;one half&#39;, 1, 2] . myList = [3, 5, 7, 6, 4, 1, 0, 2] myList.sort() . myList = [0, 1, 2, 3, 4, 5, 6, 7] . Tuple (immutable) . (element,) or element, =&gt; tuple singleton (element, element) or (element, element,) &lt;= for writing long tuples on several lines or element, element or element, element, =&gt; multiple tuple . These are sequence objects. . They have the same properties as lists except that they are immutable =&gt; once created they cannot be modified. . (a, b) = [3, 4] . a = 3 b = 4 . a, b = b, a . a = 4 b = 3 . e = list(range(10)) # tuple unpacking : cut a list # with the * we indicate that the length is unknown # with the _ or &quot;ignored&quot; we indicate that we are not interested in the content of this variable x, *_, y = e . x = 0 y = 9 . a = [1, 2] b = [3, 4] z = zip(a,b) [i for i in z] . [(1, 3), (2, 4)] . Dictionarie (mutable - immutable keys) . myDictionary = {key1:value1, key2:value2} . age = {&quot;eve&quot;:30, &quot;ana&quot;:25, &quot;bob&quot;:35} listeTupleAge = [(&quot;hel&quot;,21), (&quot;jon&quot;,41)] dicoAge = dict(listeTupleAge) age.update(dicoAge) . {&#39;eve&#39;: 30, &#39;ana&#39;: 25, &#39;bob&#39;: 35, &#39;hel&#39;: 21, &#39;jon&#39;: 41} . age[&#39;eve&#39;] . 30 . age.keys() # the result is a view . dict_keys([&#39;eve&#39;, &#39;ana&#39;, &#39;bob&#39;, &#39;hel&#39;, &#39;jon&#39;]) . age.values() # the result is a view . dict_values([30, 25, 35, 21, 41]) . for name,year in age.items(): print(f&quot;{name.capitalize()} is {year} years old&quot;) . Eve is 30 years old Ana is 25 years old Bob is 35 years old Hel is 21 years old Jon is 41 years old . Set (mutable - unordered) . {key1, key2} . A set is essentially a hash table. Close to dictionaries, mutable, unordered, they store only unique keys and are optimized for membership testing. . a = [1, 2, 1, 20, 1] s = set(a) . {1, 2, 20} . s.add(10) . {1, 2, 10, 20} . s.update([1, 3, 30]) . {1, 2, 3, 10, 20, 30} . s.discard(30) . {1, 2, 3, 10, 20} . 30 in s . False . If . if condition: block of instructions elif condition: block of instructions else: block of instructions . In conditional expression . Variable = valueTrue if test else valueFalse . In a test : . - False : False, 0, None, [], {}, (), &quot;&quot; - True : everything else . userName = &quot;C&quot; if len(userName)==1: print(&quot;Hello single!&quot;) elif len(userName)&gt;0: print(&quot;Hello&quot;, userName) else: print(&quot;Hello World!&quot;) . Hello single! . y = &quot;Hello single!&quot; if (len(userName) == 1) else &quot;Hello World!&quot; print(y) . Hello single! . Range(n) . range(*start, end + 1, *step) range(0, 5, 1) idem range(0,5) idem range(5) =&gt; 0, 1, 2, 3, 4 . x = range(2, 7, 2) for n in x: print(n) . 2 4 6 . For . for element in myGroup: instructions for i in range(start, end + 1, step): instructions . With the continue keyword, you can indicate that you want to go directly to the next element of the loop. With the keyword break, we interrupt the loop. . myList = [0, 3, 7, 13] for element in myList: print(element) . 0 3 7 13 . myText = &quot;World&quot; for element in myText: print(element) . W o r l d . While . while condition: instructions continue # ignore the following statements for this iteration break # exit while while True: # infinite loop instructions break . a = list(range(1,7)) print(a) while a: a.pop() if len(a) == 5: continue # ignore les instructions suivantes pour cette itération print(a) . [1, 2, 3, 4, 5, 6] [1, 2, 3, 4] [1, 2, 3] [1, 2] [1] [] . Functions . def functionName(arguments): &quot;&quot;&quot; documentation on several lines &quot;&quot;&quot; instructions (with or without return or just pass) . Document well if the function modifies the parameter passed to it . def calculPerimetreTriangle (cote1, cote2, cote3): &quot;&quot;&quot; receives three side lengths and returns the sum of the three &quot;&quot;&quot; perimetre = cote1 + cote2 + cote3 return perimetre print(calculPerimetreTriangle(1,2,3)) . 6 . You can put an optional argument with default value (not a mutable object) . def functionName(argument1, argument2, argument3=defaultvalue3): instructions . def f(a, b=10): print(a, b) f(1) f(1, 2) . 1 10 1 2 . Tuple or dictionaries in arguments . To not have to specify the number of elements sent to the function: . #Tuple def f(*t): print(t) #dictionary def f(**d): print(d) . def f(*t): print(t) f(1) f(1, 2, 3) . (1,) (1, 2, 3) . def f(a, b): print(a, b) L = [1, 2] f(*L) . 1 2 . def f(**d): print(d) f(nom=&quot;Dupond&quot;, prenom=&quot;Paul&quot;) . {&#39;nom&#39;: &#39;Dupond&#39;, &#39;prenom&#39;: &#39;Paul&#39;} . Named arguments . When you call the function, you can pass the arguments in the order you want, if you name them: . functionName(nameArgument2=valueArgument2, nameArgument1=valueArgument1) . . Warning: In the function call, it is not possible to enter a positional argument after an argument named . def f(a, b): print(&quot;a =&quot;, a,&quot;b =&quot;, b) f(b=1, a=5) # but f(1, 5) # warning #f(b=1, 5) =&gt; SyntaxError: positional argument follows keyword argument . a = 5 b = 1 a = 1 b = 5 . Order of consumption of arguments . The 4 forms of arguments will be summarized, depending on how the arguments of the function have been written and how they are called : . all &quot;normal&quot; arguments, called positional | form *args which catches in a tuple the rest of the positional arguments | named arguments name=&lt;value&gt; | form **dargs which catches in a dictionary the remainder of the named arguments | def foo(positionalArg1, namedArg2=100, *tuplePositionalArg, **dictNamedArg): print(f&quot;positionalArg1={positionalArg1}, namedArg2={namedArg2}, *tuplePositionalArg={tuplePositionalArg}, **dictNamedArg={dictNamedArg}&quot;) . foo(1) . positionalArg1=1, namedArg2=100, *tuplePositionalArg=(), **dictNamedArg={} . foo(1, 2) . positionalArg1=1, namedArg2=2, *tuplePositionalArg=(), **dictNamedArg={} . foo(1, 2, 3) . positionalArg1=1, namedArg2=2, *tuplePositionalArg=(3,), **dictNamedArg={} . foo(1, 2, 3, 4, arg5=5, arg6=6) . positionalArg1=1, namedArg2=2, *tuplePositionalArg=(3, 4), **dictNamedArg={&#39;arg5&#39;: 5, &#39;arg6&#39;: 6} . def bar(positionalArg1, *tuplePositionalArg, namedArg2=100, **dictNamedArg): print(f&quot;positionalArg1={positionalArg1}, namedArg2={namedArg2}, *tuplePositionalArg={tuplePositionalArg}, **dictNamedArg={dictNamedArg}&quot;) . bar(1) . positionalArg1=1, namedArg2=100, *tuplePositionalArg=(), **dictNamedArg={} . bar(1, 2) . positionalArg1=1, namedArg2=100, *tuplePositionalArg=(2,), **dictNamedArg={} . bar(1, 2, namedArg2=3) . positionalArg1=1, namedArg2=3, *tuplePositionalArg=(2,), **dictNamedArg={} . bar(1, 2, 3, namedArg2=4, namedArg5=5) . positionalArg1=1, namedArg2=4, *tuplePositionalArg=(2, 3), **dictNamedArg={&#39;namedArg5&#39;: 5} . Lambda functions . Functions that we do not intend to reuse . lambda x: [function of x] . You can execute a lambda function on a list of arguments (x) with a map and see the results in a list with a list: . list(map(lambda x: [function of x], [list of x])) . and filter the results with a filter: . list(filter(lambda x: [test on [function of x]], [list of x])) . list(map(lambda x: x**2, range(10))) . [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] . list(filter(lambda x: x % 2 == 0, range(10))) . [0, 2, 4, 6, 8] . list(map(lambda x: x**2, filter(lambda x: x % 2 == 0, range(10)))) . [0, 4, 16, 36, 64] . List comprehensions = For on lists . We create a list, set or dictionary according to our needs. . on l a list . comprehesion_l = [ function(i) for i in l if test(i) ] . on s a set . comprehesion_s = { function(i) for i in s if test(i) } . on d a dictionary . comprehesion_d = { function(i): j for i,j in d.items() if test(i, j) } . a = [1, 4, 6, 9, 13] b = [i**2 for i in a] . [1, 16, 36, 81, 169] . name = [&#39;Alice&#39;, &#39;evE&#39;, &#39;sonia&#39;, &#39;BOB&#39;] name = [p.title() for p in name] . [&#39;Alice&#39;, &#39;Eve&#39;, &#39;Sonia&#39;, &#39;Bob&#39;] . Iterator . Generator expression . iterableI = (function(x) for x in list) . Simple and compact object that allows to browse an iterable object. . The iterable object contains the data, the iterator object contains the mechanism to traverse it. . They can be browsed only once. We recognize an iterator because it is its own iterator : . i is iter(i) =&gt; True . They have two methods: . * __iter()__ * __next()__ . square = [x**2 for x in range(1_000)] . 253 µs ± 15 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) . square2 = (x**2 for x in range(1_000)) . 566 ns ± 13.3 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each) . palindrome = (x for x in square2 if str(x) == str(x)[::-1]) list(palindrome) . [0, 1, 4, 9, 121, 484, 676, 10201, 12321, 14641, 40804, 44944, 69696, 94249, 698896] . generator = (x**2 for x in range(10**18) if x%17==0) recherche = set() for x in generator: if x &gt; 10**10: break elif str(x)[-4:] == &#39;1316&#39;: # with a generator, you only pay for what you use recherche.add(x) . {617721316, 4536561316, 3617541316, 311381316} . Generator function . def functionName (arguments): instructions yield valueReturn . Function that returns an iterable so no memory space is used . def gen(it): for i in it: if isinstance(i, int): yield i**2 else: yield &#39;nan&#39; L = [1, 2, 0, &#39;18&#39;, &#39;x&#39;, [11], 25] . [1, 4, 0, &#39;nan&#39;, &#39;nan&#39;, &#39;nan&#39;, 625] . Modules and packages . A module is a Python file (.py), a package is a set of Python files (+ init.py). . The namespace is an attribute of the module. . Packages and modules are imported in the same way at the top of NoteBook . import moduleName as md import packageName as pk md.variableName md.functionName md.className pk.filename.variableName =&gt; perfect isolation of namespaces . Import with from (more complex) : . from nomModule import nomVariable =&gt; risk of collision between the local variable nameVariable and the imported one =&gt; no access to other attributes of moduleName . Package random . Method Use . random.random() | a float between 0 and 1 (1 not included) | . random.uniform(a, b) | a float between a and b (b not included) | . random.randint(a, b) | an integer between a and b (included) | random.gauss(average) | . import random print(random.random()) print(random.uniform(1,2)) print(random.randint(1,3)) . 0.09030327962871498 1.043413568072503 3 . import random population = range(1000) # Number of tickets desired N = 10 random.sample(population,N) . [495, 226, 388, 364, 297, 458, 539, 651, 878, 290] . def div(a,b): try: print(a/b) except ZeroDivisionError: print(&quot;oops, division by 0&quot;) except TypeError: print(&quot;oops, integers needed&quot;) . div(5,2) . 2.5 . div(5,0) . oops, division by 0 . div(&quot;cinq&quot;,2) . oops, integers needed . Exceptions . try: expression0 except nomException1: expression1 except nomException2: expression2 else: # on passe si aucune exception est attrapée (on n&#39;y passe pas s&#39;il y a un return avant) expression3 finally: # on passe dans le finally même s&#39;il y a un return avant expression4 . Mistrust on the floats . 0.3 - 0.1 . 0.19999999999999998 . 0.3 - 0.1 == 0.2 . False . from decimal import Decimal Decimal(&#39;0.3&#39;) - Decimal(&#39;0.1&#39;) == Decimal(&#39;0.2&#39;) . True . from fractions import Fraction Fraction(3, 10) - Fraction(1, 10) == Fraction(2, 10) . True .",
            "url": "https://cecilegallioz.github.io/blog/python/2021/04/15/ReminderPython.html",
            "relUrl": "/python/2021/04/15/ReminderPython.html",
            "date": " • Apr 15, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "My sources",
            "content": "What I’m using in my journey ? . Logo Source . | Deep Learning for Coders with Fastai and Pytorch: AI Applications Without a PhD, authors : Howard, J. and Gugger, S., publisher O’Reilly Media, Incorporated | . | Kaggle/Courses | . | Python 3 : des fondamentaux aux concepts avancés du langage | . | Démarrez votre projet avec Python | .",
            "url": "https://cecilegallioz.github.io/blog/general/2021/04/14/Sources.html",
            "relUrl": "/general/2021/04/14/Sources.html",
            "date": " • Apr 14, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Cécile Gallioz, I live in France with my husband and son. . After 15 years in business intelligence and requirements gathering, I am adding a string to my bow with Python development. . My goal is to develop tools to improve productivity and efficiency. . My values are creativity, transmission and integrity. . I have a master’s degree in mathematical engineering and a bachelor’s degree in computer development. . My profile on Kaggle . My profile on LinkedIn . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://cecilegallioz.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://cecilegallioz.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}