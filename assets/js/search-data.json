{
  
    
        "post0": {
            "title": "My reminder on Python",
            "content": "Useful information . Variables are not typed, while objects are. | . Variables address objects (strong typing). | . Variable names are best in camelCase (first letter in lower case and no numbers in first) and as meaningful as possible. | . In Python to identify a block of instructions, you need an identation of 4 spaces and not a tab | . Small immutable objects are sometimes stored as singletons (only one possible occurrence) | . Types of data . Type Example Immutable? Singleton? Notes . Integer | 1 | Immutable | Possible | No loss of accuracy | . Boolean | True ou False | Immutable | Possible | No loss of accuracy | . Float | 1.2 | Immutable | Possible | Possible loss of accuracy | . Complex | 1+2j | Immutable | Possible | Possible loss of accuracy | . String | &quot;blah&quot; or &#39;blah&#39; | Immutable | Possible | | . Tuple | ( ,) or ( , ,) or , | Immutable | Possible | | . | | | | | . List | [ , ] | Mutable | | Stores only the references | . Dictionary | { : , : } | Mutable | | Unordered and unchangeable keys/values | . Set | { , } | Mutable | | Unordered and unique immutable keys | . Operators . Operator Name Notes . = | Opérateur d&#39;affectation | | | | . # | Comments | | | | . | | | | | . + | Addition or concatenation | Int + Int = Int | Int + Float = Float | Text + Text = Text | . - | Subtraction | Int - Int = Int | Int - Float = Float | | . * | Multiplication | Int * Int = Int | Int * Float = Float | | . / | Division | Int / Int = Float | Int / Float = Float | | . | | | | | . % | Modulo | Subtract from division | | | . // | Whole division | Rounded down | | | . ** | Power | idem pow(a,b) | | | . | | | | | . str() | Cast in String | str(Int) = String | | | . int() | Cast in Int | int(Float) = Int | | | . float() | Cast in Float | float(Int) = Float | | | . | | | | | . += | Simultaneous addition and affection | | | | . -= | Simultaneous subtraction and affection | | | | . * = | Simultaneous multiplication and affection | | | | . /= | Simultaneous division and affection | | | | . f string give a string using variables . f&quot;blah-blah-blah {function1(variable1)} blah-blah-blah {function2(variable2)} blah-blah-blah&quot; . age = 45 name = &quot;Paul&quot; gap = 10 f&quot;In {gap} year(s), {name} will be {age + gap} year(s) old.&quot; . &#39;In 10 year(s), Paul will be 55 year(s) old.&#39; . List (mutable) . nameList = [&quot;String&quot;, number, otherList, variable] . The list does not store the objects but only the reference to the object. Its size will not vary according to the size of the referenced objects. . The index starts at 0. . Unlike text, they are modified by their methods =&gt; they are mutable. . Order Description . myList.index(element) | Returns the index of the element | . | | . print(myList) | Displays the entire list | . len(myList) | Returns the length of a list | . myList.sort() | Changes myList into a sorted list instead | . sorted(myList) | Copy and sort myList | . | | . myList.append(element) | Adds the element to the end of the list | . myList.insert(index, element) | Add the element to the specified index and move the following elements by one index | . myList.extend([otherList]) | Add the list otherList to the end of the first one (myList) | . | | . myList.pop(index) | Delete and display the element with the index as argument or the last one | . maListe.remove(element) | Deletes the first occurrence of an element | . del myList[index] | Deletes the element at the specified index | . | | . myList[1] | Accesses the 2nd element of the list | . myList[-1] | Go to the last element of the list | . myList[1:3] | Accesses the 2nd and 3rd elements of the list | . | | . &quot; &quot;.join(myList) | Transforms a list into a character string according to the space separator, which is the opposite of split() | . | | . random.choice(myList) | choose an element from the list | . random.choices(myList,3) | choose 3 elements in the list with throw-in | . random.sample(myList,3) | choose 3 elements from the list without throw-in | . Tuple (immutable) . (element,) or element, =&gt; tuple singleton (element, element) or (element, element,) &lt;= for writing long tuples on several lines or element, element &lt;= for tuple unpacking or element, element, =&gt; multiple tuple . These are sequence objects. . They have the same properties as lists except that they are immutable =&gt; once created they cannot be modified. . (a, b) = [3, 4] print(&quot;a =&quot;,a) print(&quot;b =&quot;, b) . a = 3 b = 4 . a, b = b, a print(&quot;a =&quot;, a) print(&quot;b =&quot;, b) . a = 4 b = 3 . e = list(range(10)) # tuple unpacking : we use the tuple notation to cut a sequence # with the * we indicate that the length is unknown # with the _ or &quot;ignored&quot; we indicate that we are not interested in the content of this variable x, *_, y = e print(&quot;x =&quot;,x) print(&quot;y =&quot;,y) . x = 0 y = 9 .",
            "url": "https://cecilegallioz.github.io/blog/python/2021/04/15/ReminderPython.html",
            "relUrl": "/python/2021/04/15/ReminderPython.html",
            "date": " • Apr 15, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "My sources",
            "content": "What I’m using in my journey ? . Logo Source . | Deep Learning for Coders with Fastai and Pytorch: AI Applications Without a PhD, authors : Howard, J. and Gugger, S., publisher O’Reilly Media, Incorporated | . | Démarrez votre projet avec Python | . | Python 3 : des fondamentaux aux concepts avancés du langage | .",
            "url": "https://cecilegallioz.github.io/blog/general/2021/04/14/Sources.html",
            "relUrl": "/general/2021/04/14/Sources.html",
            "date": " • Apr 14, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://cecilegallioz.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://cecilegallioz.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}